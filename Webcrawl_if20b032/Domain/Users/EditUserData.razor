@page "/update"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using userapi.Domain
@using userapi.Domain.Users
@inject AppDbContext context
@inject NavigationManager navmanager


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <Microsoft.AspNetCore.Components.Forms.EditForm Model="@viewmodel" OnValidSubmit="UpdateUser" FormName="UpdateForm">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-3 text-center flex-column">
                <h3>Update</h3>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="viewmodel.pw" class="form-control" placeholder="Password" type="password">
                    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => viewmodel.pw"></Microsoft.AspNetCore.Components.Forms.ValidationMessage>
                </Microsoft.AspNetCore.Components.Forms.InputText>
            </div>
            <div class="mb-3">
                <label>Nickname</label>
                <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="viewmodel.nickname" class="form-control" placeholder="Nickname">
                    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => viewmodel.nickname"></Microsoft.AspNetCore.Components.Forms.ValidationMessage>
                </Microsoft.AspNetCore.Components.Forms.InputText>
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errors</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </Microsoft.AspNetCore.Components.Forms.EditForm>
    </div>

</div>
@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }
    [SupplyParameterFromForm]
    public EditUserDataViewModel viewmodel { get; set; } = new();
    private static string _user { get; set; } = "";

    private string errors { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        string mail = (httpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim());
        _user = mail;
    }
    private async Task UpdateUser()
    {
        await Task.Delay(1);
        var _pw = viewmodel.pw != "" ? viewmodel.pw : "";
        var _nick = viewmodel.nickname != "" ? viewmodel.nickname : "";

        var user = context.Users.SingleOrDefault(u => u.email == _user);
        user.nickname = _nick;
        user.password = _pw;
        await context.SaveChangesAsync();

        errors = "Data Saved Successfully! Logging out...";
        await Task.Delay(1500);

        navmanager.NavigateTo("/logout");

    }
}
