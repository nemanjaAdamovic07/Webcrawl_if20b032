@page "/fetchdata"

@using Microsoft.Extensions.Logging
@using System.Text.RegularExpressions
@using Webcrawl_if20b032.Components.Services
@using Webcrawl_if20b032.Controllers
@using Webcrawl_if20b032.Domain.Users
@using userapi.Domain
@inject HttpClient httpClient
@inject AppDbContext dbcontext
@attribute [StreamRendering]

<div class="col-12">
    <div class="card">
        <div class="card-body">
            <AuthorizeView>
                <NotAuthorized>
                    <span>You are not logged in. Please <a class="fw-bolder" href="/login"> click here</a> to log in.</span>
                </NotAuthorized>
                <Authorized>
                    <h1>PDF Search</h1>
                    <div class="row">
                        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                            <Microsoft.AspNetCore.Components.Forms.EditForm Model="@viewmodel" OnValidSubmit="SearchUrl" FormName="SearchForm" Context="formcontext">
                                <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator></Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator>
                                <div class="mb-3 text-center flex-column">
                                    <h3>Search PDF</h3>
                                </div>
                                <div class="mb-3">
                                    <label>Enter URL</label>
                                    <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="viewmodel.url" class="form-control" placeholder="URL">
                                        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => viewmodel.url"></Microsoft.AspNetCore.Components.Forms.ValidationMessage>
                                    </Microsoft.AspNetCore.Components.Forms.InputText>
                                </div>
                                <div class="mb-3">
                                    <label>Depth</label>
                                    <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="viewmodel.depth" class="form-control" placeholder="1, 2 or 3">
                                        <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => viewmodel.depth"></Microsoft.AspNetCore.Components.Forms.ValidationMessage>
                                    </Microsoft.AspNetCore.Components.Forms.InputText>
                                </div>
                                <div class="mb-3 text-center">
                                    <span class="text-danger">@errors</span>
                                </div>
                                <div class="mb-3 d-grid gap-2">
                                    <button type="submit" class="btn btn-primary">Search!</button><br />
                                </div>
                            </Microsoft.AspNetCore.Components.Forms.EditForm>
                        </div>


                        @if (pdflinks == null || pagelinks == null)
                        {
                        }
                        else
                        {
                            <h1>PDF Links</h1>
                            @foreach (var s in pdflinks)
                            {
                                <p>@s</p>
                            }
                            <h1>Page Links</h1>
                            @foreach (var s in pagelinks)
                            {
                                <p>@s</p>
                            }
                        }
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    private FetchDataModel viewmodel { get; set; } = new();

    private string errors { get; set; } = "";
    private bool fetchingData = false;
    private string reshtml = "";
    private List<string> pdflinks;
    private List<string> pagelinks;

    private async Task SearchUrl()
    {
        errors = "Sending request...";
        await Task.Delay(500);
        errors = viewmodel.url;
        await Task.Delay(500);
        errors = "Sending request...";
        int depth;
        fetchingData = true;
        if (!String.IsNullOrWhiteSpace(viewmodel.url + viewmodel.depth))
        {
            try
            {
                depth = int.Parse(viewmodel.depth);
                if (depth < 1 || depth > 3)
                {
                    errors = "Please enter a valid depth: 1,2 or 3!";
                    return;
                }
            }
            catch (Exception)
            {
                errors = "Please enter a valid URL and depth!";
                return;
            }
            string urlPattern = @"^(https?://)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*/?$";

            bool isValidUrl = Uri.TryCreate(viewmodel.url, UriKind.Absolute, out Uri resultUri)
                     && (resultUri.Scheme == Uri.UriSchemeHttp || resultUri.Scheme == Uri.UriSchemeHttps);
            // var newhistory = new UserHistory();
            if (isValidUrl)
            {
                List<string> checkedUrls = new();
                List<string> allFoundUrls = pagelinks;
                switch (depth)
                {
                    case 1: // Just given URL
                        (pdflinks, pagelinks) = await GetHtml.ParsePageLinks(viewmodel.url);
                        fetchingData = false;
                        var newhistory = new UserHistory(HttpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim(), viewmodel.url, pdflinks, pagelinks);
                        dbcontext.UserHistory.Add(newhistory);
                        dbcontext.SaveChanges();
                        await DownloadFiles(pdflinks, HttpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim());
                        return;
                    case 2: // All URLs with same domain
                        (pdflinks, pagelinks) = await GetHtml.ParsePageLinks(viewmodel.url);
                        checkedUrls = new();
                        allFoundUrls = new();
                        foreach (string s in pagelinks)
                            allFoundUrls.Add(s);

                        foreach (string s in pagelinks)
                        {
                            List<string> depth2urls = new();
                            List<string> depth2pdfs = new();
                            if (await IsSameDomain(s, viewmodel.url))
                            {
                                (depth2pdfs, depth2urls) = await GetHtml.ParsePageLinks(s);

                                if (depth2urls.Count > 0)
                                    foreach (string s2 in depth2urls)
                                        if (!allFoundUrls.Contains(s2))
                                            allFoundUrls.Add(s2);
                                if (depth2pdfs.Count > 0)
                                    foreach (string s2 in depth2pdfs)
                                        if (!pdflinks.Contains(s2))
                                            pdflinks.Add(s2);
                            }
                        }
                        var newhistory2 = new UserHistory(HttpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim(), viewmodel.url, pdflinks, allFoundUrls);
                        dbcontext.UserHistory.Add(newhistory2);
                        dbcontext.SaveChanges();
                        pagelinks = allFoundUrls;
                        await DownloadFiles(pdflinks, HttpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim());
                        return;
                    case 3: // All URLs all domains
                        (pdflinks, pagelinks) = await GetHtml.ParsePageLinks(viewmodel.url);
                        checkedUrls = new();
                        allFoundUrls = new();
                        foreach (string s in pagelinks)
                            allFoundUrls.Add(s);

                        foreach (string s in pagelinks)
                        {
                            List<string> depth2urls = new();
                            List<string> depth2pdfs = new();
                            if (await IsSameDomain(s, viewmodel.url))
                            {
                                (depth2pdfs, depth2urls) = await GetHtml.ParsePageLinks(s);

                                if (depth2urls.Count > 0)
                                    foreach (string s2 in depth2urls)
                                        if (!allFoundUrls.Contains(s2))
                                            allFoundUrls.Add(s2);
                                if (depth2pdfs.Count > 0)
                                    foreach (string s2 in depth2pdfs)
                                        if (!pdflinks.Contains(s2))
                                            pdflinks.Add(s2);
                            }
                        }
                        pagelinks = allFoundUrls;
                        var newhistory3 = new UserHistory(HttpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim(), viewmodel.url, pdflinks, allFoundUrls);
                        dbcontext.UserHistory.Add(newhistory3);
                        dbcontext.SaveChanges();
                        await DownloadFiles(pdflinks, HttpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim());
                        return;
                    default:
                        return;
                }
            }
            else
            {
                errors = "Please enter a valid URL and depth!";
                return;
            }
        }
        errors = "Please enter a valid URL and depth!";
        return;
    }

    private static async Task<bool> IsSameDomain(string userInputUrl, string foundHyperlink)
    {
        Uri userUri = new Uri(userInputUrl);
        Uri foundUri = new Uri(foundHyperlink);

        return userUri.Host.Equals(foundUri.Host, StringComparison.OrdinalIgnoreCase);
    }

    public static async Task DownloadFiles(List<string> pdfUrls, string user)
    {
        Directory.CreateDirectory("/app/files" + user);
        try
        {
            foreach (string s in pdfUrls)
            {
                var client = new HttpClient();
                var response = await client.GetAsync(s);
                response.EnsureSuccessStatusCode();

                string fileName = Path.GetFileName(s);
                string filePath = Path.Combine("/app/files/" + user, fileName);

                using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    await response.Content.CopyToAsync(fileStream);
                }
            }

        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
}
