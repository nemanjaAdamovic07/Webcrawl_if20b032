@page "/stats"
@using Microsoft.Extensions.Logging
@using System.Text.RegularExpressions
@using System.Net
@using Webcrawl_if20b032.Components.Controllers
@using Webcrawl_if20b032.Components.Services
@using Webcrawl_if20b032.Controllers
@using Webcrawl_if20b032.Domain.Files
@using Webcrawl_if20b032.Domain.Users
@using iText.Kernel.Pdf.Canvas.Parser
@using userapi.Domain
@using System;
@using System.Collections.Generic;
@using System.IO;
@using iText.Kernel.Pdf;
@using System.Linq;
@using Syncfusion.Blazor.Buttons;
@inject IJSRuntime JS

@inject HttpClient httpClient
@inject AppDbContext dbcontext
@attribute [StreamRendering]


<AuthorizeView>
    <NotAuthorized>
        <span>You are not logged in. Please <a class="fw-bolder" href="/login"> click here</a> to log in.</span>
    </NotAuthorized>
    <Authorized>
        <div class="row">
            <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                <Microsoft.AspNetCore.Components.Forms.EditForm Model="@viewmodel" OnValidSubmit="FilterFiles" FormName="WordLookupForm" Context="wlookupContext">
                    <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator></Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator>
                    <div class="mb-3 text-center flex-column">
                        <h3>Filter PDFs</h3>
                    </div>
                    <div class="mb-3">
                        <label>Search for a Word</label>
                        <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="viewmodel.word" class="form-control" placeholder="Searchterm">
                            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => viewmodel.word"></Microsoft.AspNetCore.Components.Forms.ValidationMessage>
                        </Microsoft.AspNetCore.Components.Forms.InputText>
                    </div>
                    <div class="mb-3 text-center">
                        <span class="text-danger">@errors</span>
                    </div>
                    <div class="mb-3 d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Search</button><br />
                    </div>
                </Microsoft.AspNetCore.Components.Forms.EditForm>

            </div>
        </div>
        <div class="row">
            <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                <Microsoft.AspNetCore.Components.Forms.EditForm Model="@viewmodel" OnValidSubmit="FilterFilenames" FormName="FilenameLookup" Context="flookupContext">
                    <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator></Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator>
                    <div class="mb-3 text-center flex-column">
                    </div>
                    <div class="mb-3">
                        <label>Search for a File</label>
                        <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="viewmodel.filename" class="form-control" placeholder="Searchterm">
                            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="() => viewmodel.filename"></Microsoft.AspNetCore.Components.Forms.ValidationMessage>
                        </Microsoft.AspNetCore.Components.Forms.InputText>
                    </div>
                    <div class="mb-3 text-center">
                        <span class="text-danger">@errors</span>
                    </div>
                    <div class="mb-3 d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Search</button><br />
                    </div>
                </Microsoft.AspNetCore.Components.Forms.EditForm>

            </div>
        </div>
        @if (loading)
        {

            <h1>Loading files. This might take a while...</h1> 
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Filename</th>
                        <th>Filepath</th>
                        <th>Common Words</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredFiles.Count == 0)
                    {
                        <h2>No Files Found</h2>
                    }
                    else
                    {
                        @foreach (var file in filteredFiles)
                        {
                            <tr>
                                <td>
                                    <p>@File.GetLastWriteTime(file.Filepath).ToLocalTime()</p>
                                </td>
                                <td>@file.FileName</td>
                                <td><a href="@file.Filepath.Substring(13,file.Filepath.Length-13)">@file.Filepath</a></td>
                                <td>
                                    <p>
                                        @foreach (var kvp in file.commonwords)
                                        {
                                            if (kvp.Key == viewmodel.word)
                                            {
                                                <text> <b>@kvp.Key.ToString(): @kvp.Value.ToString(); </b> </text> <br />

                                            }
                                            else
                                            {
                                                <text>@kvp.Key.ToString(): @kvp.Value.ToString();</text> <br />

                                            }
                                        }

                                    </p>
                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        }
    </Authorized>
</AuthorizeView>




@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }
    [SupplyParameterFromForm]
    private StatsViewModel viewmodel { get; set; } = new();

    private static string errors { get; set; } = "";
    private static List<string> filenames { get; set; } = new();
    private static List<FileModel> userFiles { get; set; } = new();
    private static List<FileModel> filteredFiles { get; set; } = new();
    private static bool loading = false;


    private async Task FilterFiles()
    {
        string ws = viewmodel.word;
        if (ws.Length < 1)
        {
            filteredFiles = userFiles;
            return;
        }
        else if (ws.Split(" ").Length > 1)
        {
            errors = "Please use only one searchterm!";
            return;
        }

        filteredFiles = filteredFiles.Where(f => f.commonwords.ContainsKey(ws)).ToList();
        return;


    }
    private async Task FilterFilenames()
    {
        string ws = viewmodel.filename;
        if (ws.Length < 1)
        {
            filteredFiles = userFiles;
            return;
        }
        else if (ws.Split(" ").Length > 1)
        {
            errors = "Please use only one searchterm!";
            return;
        }

        filteredFiles = filteredFiles.Where(f => f.FileName.Contains(ws)).ToList();
        return;


    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await Task.Delay(1);
        filteredFiles = new List<FileModel>();
        userFiles = new List<FileModel>();
        filteredFiles.RemoveAll(s => true);
        userFiles.RemoveAll(s => true);
        string user = (httpContext.User.Claims.FirstOrDefault(s => true).ToString().Split("emailaddress:")[1].Trim());
        if (!Directory.Exists("/app/wwwroot/files/" + user))
        {
            Directory.CreateDirectory("/app/wwwroot/files/" + user);
        }
        string path = "/app/wwwroot/files/" + user;
        string[] filepaths = Directory.GetFiles(path);
        foreach (string s in filepaths)
        {
            string[] singlefilepath = new string[1] { s };
            filenames.Add(Path.GetFileName(s));
            var res = await ParsePDF.GetTopWordsFromPdfFiles(singlefilepath);

            userFiles.Add(new FileModel(s, Path.GetFileName(s), res));
        }

        filteredFiles = userFiles;
        loading = false;

    }
    
}
